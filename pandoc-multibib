#!/usr/bin/env python


def interpretArr(bibliographies, document, fmt):
    for b in bibliographies:
        altered = interpretEntry(b['c'], document, fmt)
        document = altered

    return document


# Expects entry to be a dict with structure as follows:
#    "Header": {
#       "t": "MetaInlines",
#       "c": [
#         {
#           "t": "Str",
#           "c": "bibliography.type"
#         }
#       ]
#     }
def interpretEntry(entry, doc, fmt):
    from sys import stderr
    from pandocfilters import Header, attributes, Str
    from json import dumps

    header = entry.keys()[0]

    # Place bibliography into YAML metadata for pandoc-citeproc to parse.
    doc[0]['unMeta']['bibliography'] = entry[header]

    # Create header id and append header to doc.
    header_id = str(header_to_id(header))
    doc[1].append(Header(1, [header_id, [], []], [Str(header)]))
    
    return citeproc(doc, fmt)


def citeproc(doc, fmt):
    from subprocess import Popen, PIPE
    from json import dumps, loads
    from sys import stderr

    # create filter process pandoc-citeproc
    filter_process = Popen(['pandoc-citeproc', fmt], stdin=PIPE, stdout=PIPE)

    # Filter the whole shebang through filter_process (after converting to JSON),
    # select the stdout, and parse the JSON.
    raw_altered_doc = filter_process.communicate(input=dumps(doc))[0]
    altered_doc = loads(raw_altered_doc)

    return altered_doc


# Expects header to be a string.
def header_to_id(header):
    from re import sub
    
    # Delete all punctuation except underscores, hyphens, and full stops.
    header_id = sub(r'[^-\s\w\d\.]', '', header)
    # Replace all spaces and newlines with hyphens.
    header_id = sub(r'\s', '-', header_id)
    # Lowercase everything
    header_id = header_id.lower()
    # Remove initial non-letters:
    header_id = sub(r'^[^a-z]*', '', header_id)

    if len(header_id) == 0:
        return "section"
    else:
        return str(header_id)

def interpret(doc, fmt):
    if not doc[0]['unMeta'].get('bibliography'): return doc
    if not doc[0]['unMeta'].get('bibliographies'): return citeproc(doc, fmt)

    bibliography = doc[0]['unMeta']['bibliography']
    bibliographies = doc[0]['unMeta']['bibliographies']

    if bibliographies['t'] == 'MetaList':
        new_doc = interpretArr(bibliographies['c'], doc, fmt)
    elif bibliographies['t'] == 'MetaMap':
        new_doc = interpretEntry(bibliographies['c'], doc, fmt)

    new_doc[0]['unMeta']['bibliography'] = bibliography

    new_doc = citeproc(new_doc, fmt)
    del new_doc[1][-1]

    return new_doc 

from json import load, dump
from sys import stdin, stdout, argv

document = load(stdin)

if len(argv) > 1:
    format = argv[1]
else:
    format = ""

dump(interpret(document, format), stdout)
