#!/usr/bin/env python
from pandocfilters import RawInline, walk, stringify, toJSONFilter, Note, Para

"""
Does annotation stuff. For use with marginnote.sty.
Pretty hacky. Don't use once pandoc implements a proper
method for filtering notes.
"""

class WalkFilter(object):
    def __init__(self, power_symbol):
        self.power_symbol = power_symbol
        self.powersym = True
        self.powersym_space = True
    def latex_filter(self, key, val, fmt, meta):
        if key == 'Para':
            return walk(val, self.latex_filter, "", {})
        elif self.powersym and val == self.power_symbol:
            self.powersym = False
            return []
        elif self.powersym_space and key == 'Space':
            self.powersym_space = False
            return []
    def filter(self, key, val, fmt, meta):
        if key == 'Para':
            return Para(walk(val, self.filter, "", {}))
        elif self.powersym and val == self.power_symbol:
            self.powersym = False
            return []
        elif self.powersym_space and key == 'Space':
            self.powersym_space = False
            return []
        
def latexInline(s):
    return RawInline('latex', s)

def parse(key, val, fmt, meta):

    power_functions = {
                      '>': latexInline('\\normalmarginpar\\marginnote{'),
                      '~': latexInline('\\reversemarginpar\\marginnote{')
                      }

    if key == 'Note':
        first_letter = stringify(val)[0]
        if first_letter in power_functions.keys():
            if fmt == 'latex':
                filter_function = WalkFilter(first_letter).latex_filter
                return ([power_functions[first_letter]] +
                        walk(val, filter_function, "", {}) +
                        [latexInline('}')])
            else:
                filter_function = WalkFilter(first_letter).filter
                return [Note(walk(val, filter_function, "", {}))]

if __name__ == "__main__":
  toJSONFilter(parse)
